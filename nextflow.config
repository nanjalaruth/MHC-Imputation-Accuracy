/*
 * -------------------------------------------------
 * HLAimputation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */
// Global default params, used in configs
params {
  // General options
  name = false
  // version = '1.0'
  clusterOptions = false
  help = false
  plaintext_email = false
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // TODO Pipeline's command line flags

  chromosomes = "6" // Impute chromosome 6 by default
  project_name = "HLAimputation" // Default project name

  // Minimac4 option
  minRatio = '0.01'
  chunk = ''
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  standard { includeConfig 'conf/base.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    docker.runOptions = '-u root'
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    process.container = 'quay.io/nanjalaruth/impute-hla'
    singularity.runOptions = "-B /scratch3/users/nanje"
  }
  slurm {
    includeConfig 'conf/base.config'
    process.executor = 'slurm'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

process {
  // Process-specific resource requirements
  errorStrategy  = 'retry'
  maxRetries = 1

  // Process-specific resource requirements
    withLabel: 'medium' {
        memory = 8.GB
    }
    withLabel : 'bigmem' {
        memory = { 120.GB * task.attempt }
        time = { 24.h * task.attempt }
        cpus = 9
    }
    withLabel: 'biggermem' {
        memory = { 200.GB * task.attempt }
        time = {100.h * task.attempt }
        cpus = 9
    }
}

manifest {
  name = 'HLAimputation'
  homePage = 'https://github.com/nanjalaruth/MHC-Imputation-Accuracy'
  description = 'imputation of the HLA region'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.10.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
